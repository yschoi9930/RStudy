summary(fit)
qqplot(lm(weight ~ group, data = diet))
qqPlot(lm(response ~ trt, data=cholesterol),
simulate=TRUE, main="Q-Q Plot", labels=FALSE)
bartlett.test(weight ~ group, data = diet)
par(las=1)                # 축 라벨 회전
par(mar=c(5, 4, 4, 2))
qqplot(lm(weight ~ group, data = diet))
bartlett.test(weight ~ group, data = diet)
# 4) 사후검정
tukey <- TukeyHSD(fit, conf.level = 0.95)
tukey
# 실습문제 2
qty<-matrix(c(12,14,12,20,4,18,6,17,20,22,16,17), ncol=3); qty
dimnames(qty)<- list(c("B1","B2","B3","B4"), c("A1","A2","A3"))
dty
qty
str(qty)
y2 <- c(700,820,710,830,540,680,530,710,450,590,470,590,460,600,470,610)
fac <- gl(n=3, k=4, length=16, labels=c('소형','준중형','중형','대형'))
group <- gl(n=2,k=2,16, length=16,labels=c("제조사A", "제조사B"))
data <- data.frame(y=y2, factor=fac, group=group) ; data
kind <- ql(3,4,12, labels=c("A1","A2","A3")); kind
kind <- gl(3,4,12, labels=c("A1","A2","A3")); kind
fert <- gl(4,1,12, labels=c("B1","B2","B3","B4")); fert
qty<-c(12,14,12,20,4,18,6,17,20,22,16,17)
tomato <-data.frame(qty, kind, fert)
tomato <-data.frame(qty, kind, fert); tomato
table(tomato)
aggregate(qty, by=list(kind) FUN=mean)
aggregate(qty, by=kind FUN=mean)
aggregate(qty, by="kind" FUN=mean)
aggregate(qty, by="kind", FUN=mean)
aggregate(qty, by=list("kind"), FUN=mean)
aggregate(qty, by=list(kind), FUN=mean)
aggregate(qty, by=list(group=kind), FUN=mean)
aggregate(qty, by=list(kind=kind), FUN=mean)
species <- gl(3,4,12, labels=c("A1","A2","A3")); kind
tomato <-data.frame(qty, species, fert); tomato
aggregate(qty, by=list(species =species), FUN=mean)
aggregate(qty, by=list(fert=fert), FUN=mean)
species_aov<-aov(qty ~ species)
summary(species_aov)
# 1) 품종에 따른 생산량 차이
fert_aov <- aov(qty ~  fert)
summary(fert_aov)
# 2.2) 등분산성
library(lawstat)
levene.test(diet$weight, diet$group,
location="mean", correction.method = "zero.correction")
bartlett.test(weight ~ group, data = diet)
group_ex <- rep(c("A","B","C","D"), c(8,4,7,6)) ; group_ex
# 1) 데이터 작성
group <- c(rep("A",8),rep("B",4),rep("C",7),rep("D",6)) ; group
qqPlot(lm(weight ~ group, data = diet))
qqPlot(lm(weight ~ group, data = diet),
simulate=T, main="Q-Q Plot", labels=F)
glht(fit, linfct=mcp(x="Tukey"))
plot(fit, linfct=mcp(x="Tukey"))
plot(huk)
plot(tuk)
tuk <- glht(fit, linfct=mcp(x="Tukey"))
library(multcomp)
ploy(tukey)
plot(tukey)
tuk <- glht(fit, linfct=mcp(x="Tukey"))
tuk <- glht(fit, linfct=mcp(group="Tukey"))
tuk <- glht(fit, linfct=mcp(group="Tukey"))
plotmeans(weight, group)
plotmeans(weight ~ group)
plot(tukey)
library(gplots)
library(multcomp)
tuk <- glht(fit, linfct=mcp(group="Tukey"))
tuk <- glht(fit, linfct=mcp(weight="Tukey"))
tuk <- glht(fit, linfct=mcp(diet$weight="Tukey"))
tuk <- glht(fit, linfct=mcp(diet$group="Tukey"))
tuk <- glht(fit, linfct=mcp(group="Tukey"))
str(tomato)
# 3) 품종과 비료의 상호작용의 영향
total_aov<-aov(qty ~ species + fert)
summary(total_aov)
# 3) 품종과 비료의 상호작용의 영향
total_aov<-aov(qty ~ species + fert, data=tomato)
summary(total_aov)
fit2 <- aov(y2 ~ store2 + loc2, data=survey2)
y1 <- c(1,4,1,2,2,3,2,3,2,
4,4,3,3,2,3,4,2,3,
4,3,4,4,3,3,2,4,4)
y1
store <- gl(n=3, k=9, length=27,
labels = c('StoreA', 'StoreB', 'StoreC'))
store
loc <- gl(n=3, k=3, length=27, labels = c('강남', '홍대', '종로'))
loc
survey1 <- data.frame(store, loc, y)
survey1
fit <- aov(y ~ store + loc, data=survey1)
#fit <- aov(y ~ store * loc, data=survey1)
summary(fit)
y2 <- c(1,4,1,4,4,3,4,3,4,
2,2,3,3,2,3,4,3,3,
2,3,2,4,2,3,2,4,4)
store2 <- gl(n=3, k=3, length=27,
labels = c('StoreA', 'StoreB', 'StoreC'))
loc2 <- gl(n=3, k=9, length=27, labels = c('강남', '홍대', '종로'))
survey2 <- data.frame(store2, loc2, y2)
fit2 <- aov(y2 ~ store2 + loc2, data=survey2)
summary(fit2)
total_aov<-aov(qty ~ species*fert, data=tomato)
summary(total_aov)
summary(total_aov2)
# 3) 품종과 비료의 상호작용의 영향
total_aov<-aov(qty ~ species + fert, data=tomato)
total_aov2<-aov(qty ~ species*fert, data=tomato)
summary(total_aov)
summary(total_aov2)
interaction2wt(qty~species*fert, data=tomato)
library(HH)
interaction2wt(qty~species*fert, data=tomato)
library(gplots)
interaction.plot(species, fert, qty, type="b",
col=c("red","blue"), pch=c(16, 18),
main = "Interaction between Dose and Supplement Type")
interaction.plot(species, fert, qty, type="b",
col=c("red","blue"), pch=c(16, 18),
main = "Interaction between fert and species")
install.packages("gplot")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(gplots)
library(gplots)
install.packages("gplots")
library(gplots)
plotmeans(qty ~ interaction(species, fert, sep=" "),
connect=list(c(1,3,5),c(2,4,6)),
col=c("red", "darkgreen"),
main = "Interaction Plot with 95% CIs",
xlab="Treatment and Dose Combination")
interaction2wt(qty~species*fert, data=tomato)
library(HH)
interaction2wt(qty~species*fert, data=tomato)
plot(Petal.Length ~ Sepal.Length, data=irisData)
data(iris)
plot(Petal.Length ~ Sepal.Length, data=irisData)
data(irisData)
plot(Petal.Length ~ Sepal.Length, data=iris)
plot(iris[1,4])
plot(iris[,1:4])
cor(iris[,1:4])
plot(Petal.Length ~ Sepal.Length, data=iris)
abline(lm(Petal.Length ~ Sepal.Length))
abline(lm(Petal.Length ~ Sepal.Length, data=iri))
abline(lm(Petal.Length ~ Sepal.Length, data=iris))
plot(Petal.Length ~ Sepal.Length, data=iris)
plot(Petal.Length, Sepal.Length, data=iris)
abline(lm(Petal.Length ~ Sepal.Length, data=iris))
pairs.pannel(Petal.Length, Sepal.Length)
install.packages(psych)
install.packages("psych")
library(psych)
pairs.pannel(Petal.Length, Sepal.Length)
pairs.pannel(Petal.Length, Sepal.Length)
pairs.pannels(Petal.Length, Sepal.Length)
pairs.pannels(iris)
psych::pairs.pannels(iris)
corr.test(iris)
corr.test(iris[,1:4])
psych::pairs.pannels(iris)
library(psych)
pairs.pannels(iris)
pairs.pnels(iris)
pairs.panels(iris)
library(car)
head(car)
data(car)
data(carData)
library(carData)
data(carData)
head(car)
head(carData)
library(carData)
head(car)
library(car)
head(car)
head(carData)
head(cardata)
head(car)
library(car)
head(cars)
# 기본 통계값과 산점도
describe(cars)
summary(cars)
plot(cars)
# 산점도에 선형회귀식 추가
abline(lm(speed, dist, data=cars))
# 산점도에 선형회귀식 추가
abline(lm(speed, dist), data=cars)
# 산점도에 선형회귀식 추가
abline(lm(speed ~ dist,data=cars))
# 공분산과 상관계수 값
cov(cars)
cor(cars)
# 산점도에 선형회귀식 추가
abline(lm(dist ~ speed,data=cars))
plot(cars)
# 산점도에 선형회귀식 추가
abline(lm(dist ~ speed,data=cars))
# 공분산과 상관계수 값
cov(cars)
cor(cars)
# 유의도 검정 및 결과
corr.test(cars)
pairs.panels(cars)
# 모델간 비교
anova(carfit)
# 모델간 비교
anova(carFit)
detach("package:car", unload = TRUE)
detach("package:carData", unload = TRUE)
(full <- lm(dist ~ speed, data=cars))
(reduce <- lm(dist ~ 1, data=cars))
anova(reduce, full)
# 1. 오차항의 정규성 검정
shapiro.test(residuals(carFit))
# 실습문제 1
exc <- c(1095,1110,1086,1074,1098,1105,1163,1124,1088,1064)
exp <- c(49,52,48,49,50,51,50,51,49,48)
data <- rbind(exc, exp)
data <- rbind(exc, exp) ; data
data <- cbind(exc, exp) ; data
rownames(data) <- c(1,2,3,4,5,6,7,8,9,10,11,12)
rownames(data) <- c(1,2,3,4,5,6,7,8,9,10)
data <- cbind(exc, exp) ; data
rownames(data) <- c(1,2,3,4,5,6,7,8,9,10)
rownames(data) <- c(1,2,3,4,5,6,7,8,9,10) ; data
# 1) 데이터 구조와 특징 파악
summary(data)
describe(data)
plot(data)
fit <- lm(exp ~ exc, data =data)
data <- data.frame(exc, exp) ; data
data <- data.frame(exc, exp) ; data
fit <- lm(exp ~ exc, data =data)
summary(fit)
anova(fit)
fit
# 실습문제 2
year <- c(26,16,20,7,22,15,29,28,17,3,1,16,19,13,27,4,30,8,3,12)
sal <- c(1267,887,1022,511,1193,795,1713,1477,991,455,324,
944,1232,808,1296,486,1516,565,299,830)
data_2 <- data.frame(year, sal)
data_2 <- data.frame(year, sal) ; data2
data_2 <- data.frame(year, sal) ; data_2
plot(fit)
plot(fit)
resid(fit)
par(mfrow=c(2,2))
source('C:/RStudy/210304 linear regression.R', encoding = 'UTF-8', echo=TRUE)
par(mfrow=c(2,2))
plot(fit, which=c(4,6))
plot(fit, which=c(4,6))
resid(fit)
plot(fit, which=1)
plot(fit, which=2)
plot(fit, which=3)
plot(fit, which=4)
plot(fit, which=5)
plot(fit, which=6)
resid(fit)
shapiro.test(resid(fit))
plot(data)
abline(coef(fit))
predict(fit, newdata=data.frame(exc=1100))
## 1) 데이터 구조와 특징 파악
describe(data_2)
summary(data_@)
summary(data_2)
plot(data_2)
fit <- lm(sal ~ year, data=data_2)
summary(fit)
fit_2 <- lm(sal ~ year, data=data_2)
summary(fit_2) # p<0.05, 회귀식 채택
shapiro.test(resid(fit))
predict(fit_2, newdata=data.frame(year=25))
str(data)
cor(data$exc, data$exp)
psych::pairs.panels(data)
plot(fit, which=1)
plot(fit, which=2)
plot(fit, which=3) # 표준화된 잔차, 추정값,관계가 있으면 안됨(등분산성)
plot(fit, which=4) #
plot(fit, which=5)
plot(fit, which=6)
## 2) 회귀모형 가정에 대한 평가
cor(data_2$year, data_2$sal) # 0.58
psych::pairs.panels(data_2)
plot(data)
## 2) 회귀모형 가정에 대한 평가 - 상관관계 체크
cor(data$exc, data$exp) # 0.58
psych::pairs.panels(data)
## 1) 데이터 구조와 특징 파악
describe(data_2)
summary(data_2)
cor.test(data_2$year, data_2$sal)
plot(data_2)
psych::pairs.panels(data_2)
plot(data_2)
abline(fit)
fit_2 <- lm(sal ~ year, data=data_2)
## 4) 회귀모형에 대한 평가
summary(fit_2) # p<0.05, 회귀식 채택
## 4.1) 오차항 정규성 검정
shapiro.test(resid(fit_2)) # 정규성 충족
## 4.2) 등분산성, 정규성, 이상치 확인
par(mfrow=c(2,2))
plot(fit_2, which=1)
plot(fit_2, which=2)
plot(fit_2, which=3)
plot(fit_2, which=4)
plot(fit_2, which=5)
plot(fit_2, which=6)
predict(fit_2, newdata=data.frame(year=25)) # 1325,44
predict(fit_2, newdata=data.frame(year=c(25,27)) # 1325.44
predict(fit_2, newdata=data.frame(year=c(25,27))) # 1325.44
predict(fit_2, newdata=data.frame(year=c(25,27))) # 1325.44
summary(data_2)
# 데이터 수정
data <- data[-7,]
cor.test(data$exc, data$exp)
psych::pairs.panels(data)
fit <- lm(exp ~ exc, data =data)
summary(fit)
fitted(fit)
install.packages("dplyr")
library(dplyr)
class(state.x77)
colnames(state.x77)
states <- as.data.frame(state.x77) %>% select(1:3,5,7)
states
view(states)
cor(states)
psych::pairs.panels(states)
install.packages('corrgram')
library(corrgram)
corrgram(states)
library(corrplot)
install.packages('corrplot')
library(corrplot)
corrplot(cov(states))
corrplot(cov(states))
corrplot(cor(states))
GGgally::ggpairs(states)
install.packages('GGgally')
GGgally::ggpairs(states)
install.packages('GGally')
GGally::ggpairs(states)
fit <- lm(Murder ~ Population + Illiteracy + Income +Frost, data=states)
summary(fit)
plot(fit)
par(mfrow=c(1,1))
plot(fit)
shapiro.test(residual(fit))
shapiro.test(residuals(fit))
data(mtcars)
colnames(mtcars)
fitcars <- lm(mpg ~ hp * wt , data=mtcars) # = hp + wt +hp::wt
summary(fitcars)
library(effects)
effect('hp:wt', fitcars, list(wt=c(2.2,3.2,4.2)))
effect('hp:wt', fitcars, list(wt=c(2.2,3.2,4.2)), multiline)
states <- as.data.frame(state.x77[,c("Murder","Population","Illiteracy",
"Income", "Frost")]
view(states)
cor(states)
install.packages('corrgram')
library(corrgram)
psych::pairs.panels(states)
corrgram(states)
install.packages('corrplot')
install.packages('GGally')
library(corrplot)
corrplot(cor(states))
GGally::ggpairs(states)
states <- as.data.frame(state.x77[,c("Murder","Population","Illiteracy",
"Income", "Frost")]
view(states)
cor(states)
install.packages('corrgram')
library(corrgram)
psych::pairs.panels(states)
corrgram(states)
install.packages('corrplot')
install.packages('GGally')
library(corrplot)
corrplot(cor(states))
GGally::ggpairs(states)
fit <- lm(Murder ~ Population + Illiteracy + Income +Frost, data=states)
summary(fit)
par(mfrow=c(1,1))
plot(fit)
colnames(mtcars)
fitcars <- lm(mpg ~ hp * wt , data=mtcars) # = hp + wt + hp:wt
summary(fitcars)
library(effects)
plot(effect('hp:wt', fitcars, list(wt=c(2.2,3.2,4.2)))), multiline=T)
install.packages("GGally")
plot(effect('hp:wt', fitcars, list(wt=c(2.2,3.2,4.2))), multiline=T)
library(effects)
library(effect)
library(effects)
plot(effect('hp:wt', fitcars, list(wt=c(2.2,3.2,4.2))), multiline=T)
fit_3 <- lm(Murder ~ Population + Illiteracy + Income + Frost, data =states)
fit_3 <- lm(Murder ~ Population + Illiteracy + Income + Frost, data =states)
donfint(fit)
confint(fit_3)
view(women)
View(women)
qqPlot(fit_3)
library(car)
qqPlot(fit_3)
qqPlot(fit_3, labels=row.names(states), simulate=T)
qqPlot(fit_3)
qqPlot(fit_3, labels=row.names(states), simulate)
qqPlot(fit_3, labels=row.names(states), simulate=T)
fitted(fit_3)["Nevada"]
# 오차의 독립성
durbinWatsonTest(fit_3)
# 선형성
crPlots(fit)
# 등분산성 검정
ncvTest(fit)
# 등분산성 검정
ncvTest(fit) # p = 0.186
spreadLevelPlot(fit_3)
install.packages("gvlma")
library(gvlma)
gvmodel <- gvlma(fit_3)
summary(gvmodel)
rstudent(fit_3)["Nevada"]
# 이상치, 지래점, 영향치 모두 보여주는 plot
influencePlot(fit_3)
data(trees)
head(trees)
describe(trees)
describe(trees)
cor(trees$Girth, trees$Volume)
cor.test(trees$Girth, trees$Volume)
plot(trees$Girth, trees$Volume)
fit_trees <- lm(Volume ~ Girth, data = trees)
summary(fit_trees)
abline(fit_trees)
psych::pairs.panels(trees[,1][,2])
psych::pairs.panels(trees[,1,2)
psych::pairs.panels(trees[,1,2])
psych::pairs.panels(trees[,1])
psych::pairs.panels(trees["Girth","Volume"])
psych::pairs.panels(trees)
psych::pairs.panels(trees)["Girth","Volume"]
predict(fit_trees, newdata = data.frame(c(8.5,9.0,9.5)))
head(trees)
fit_trees <- lm(Volume ~ Girth, data = trees)
summary(fit_trees) # 회귀식 채택
abline(fit_trees)
predict(fit_trees, newdata = data.frame(c(8.5,9.0,9.5)))
predict(fit_trees, newdata = data.frame(Girth=c(8.5,9.0,9.5)))
fit_trees2 <- lm(Voloume ~ Girth + height, data=trees)
fit_trees2 <- lm(Volume ~ Girth + height, data=trees)
dim(trees)
is.na(trees)
fit_trees2 <- lm(Volume ~ Girth + height, data=trees)
fit_trees2 <- lm(Volume ~ Girth + height, data=trees)
fit_trees2 <- lm(Volume ~ Girth + Height, data=trees)
summary(fit_trees2)
car(qqplot(fit_trees2))
library(car)
car(qqplot(fit_trees2))
car::qqplot(fit_trees2)
car::qqPlot(fit_trees2)
car::crplot(fit_trees2)
car::crpPlot(fit_trees2)
car::crPlot(fit_trees2)
plot(fit_trees2)
car::crPlot(fit_trees2)
par(mfrow=c(2,2))
plot(fit_trees2)
library(car)
car::crPlot(fit_trees2)
car::crPlots(fit_trees2)
car::ncvTest(fit_trees2) # 등분산성
scatterplotMatrix(trees)
scatterplotMatrix(trees, spread=F)
predict(fit_trees, newdata = data.frame(Girth=c(8.5,9.0,9.5)), interval ="confidence")
car::durbin.watson(fit_trees2)
car::durbinWatsonTest(fit_trees2) # 정규성성
car::qqPlot(fit_trees2) # 정규성
car::spread.level.plot(fit_trees2)
car::spreadlevelplot(fit_trees2)
car::spreadLevelPlot(fit_trees2)
car::crPlots(fit_trees2) # 선형성
car::ncvTest(fit_trees2) # 등분산성 귀무가설 채택
car::spreadLevelPlot(fit_trees2)
gvmodel <- gvlma(fit_trees2)
summary(gvmodel)
car::vif(fit_trees2)
sqrt(vif(fit_trees2))
# 이상치, 지래점, 영향치 검토
car::outlier.test(fit_trees2)
# 이상치, 지래점, 영향치 검토
car::outlierTest(fit_trees2)
car::influencePlot(fit_trees2)
