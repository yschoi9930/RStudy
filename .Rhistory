weight.input<-dlgInput('Input weight')$res
weight <- as.numeric(weight.input)
height.input<-dlgInput('Input height')$res
height <- as.numeric(height.input)
weight
height
weight.input<-dlgInput('Input weight')$res
weight <- as.numeric(weight.input)
height.input<-dlgInput('Input height')$res
height <- as.numeric(height.input)
BMI <- weight/(height/100)^2
cat("your bmi is", BMI, sep=" ")
test<-as.numeric(dlgInput('Input weight')$res); test
test<-dlgInput('Input weight')$res; test
install.packages("xlxs")
library("xlxs")
install.packages("xlxs")
install.packages("xlxs")
install.packages("xlsx")
library(xlsx)
quakes
write.xlsx(quakes, 'data/quakes.xlsx')
a
a<-scan("testdata.txt",what="")
a
a[4]
str(a)
c
c<-read.table("testdata.txt", header=T)
c
fruit
write.xlsx(my.iris,"iris.xlsx",row.names=F)
write.xlsx(iris,"iris.xlsx",row.names=F)
clipd<-read.table(file="clipboard",
header=TRUE,
sep"\t",
stringAdFactors=FALSE)
clipd<-read.table(file="clipboard",
header=TRUE,
sep"\t",
stringAsFactors=FALSE)
clipd<-read.table(file="clipboard",
header=TRUE,
)
clipd<-read.table(file="clipboard",
header=TRUE,
sep"\t",
stringAsFactors=FALSE)
clipd<-read.table(file="clipboard",
header=T,
sep"\t",
stringAsFactors=F)
clipd<-read.table(file="clipboard",
header=T,
sep"\t",
stringsAsFactors=F)
clipd <- read.table(file="clipboard",
header=T,
sep"\t",
stringsAsFactors=F)
clipd <- read.table(file="clipboard",
header=T,
sep"\t",
stringsAsFactors=F)
clipd <- read.table(file="clipboard",
header=T,
sep"\t",
stringsAsFactors=F)
clipd <- read.table(file="clipboard",
header=T,
sep="\t",
stringsAsFactors=F)
clipd <- read.table(file="clipboard",
header=T,
sep="\t",
stringsAsFactors=F)
clipd
print('Begin work')
a<- 10; b<-20
sink('result.txt', append =T)
cat('a+b=',a+b, '\n')
sink()
cat('hello world \n')
sink('result.txt', append =T)
cat('a*b=',a*b,'\n')
sink()
sink('result.txt', append =F)
cat('a*b=',a*b,'\n')
sink()
install.packages(ggplot2)
install.packages('ggplot2')
library()
library(ggplot2)
library(ggplot2)
str(diamonds)
cut
diamonds$cut
levels(diamonds$cut)
new<-subset(diamonds, cut =="Premium" & carat >=2)
write.csv(new, test2.csv,row.names=F)
write.csv(new, 'test2.csv',row.names=F)
new<-subset(diamonds, cut =="Premium" & carat >=2)
write.csv(new, 'test2.csv',row.names=F)
diamonds2<-read.csv('test2.csv', header =T)
Not_d<-subset(diamonds2, color!='D')
write.xlsx(Not_d, 'test3.xlsx', row.names=F)
url<-"https://vincentarelbundock.github.io/Rdatasets/csv/datasets/Titanic.csv"
url<-"https://vincentarelbundock.github.io/Rdatasets/csv/datasets/Titanic.csv"
titanic<-read.csv(url)
head(titanic)
titanic<-read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/datasets/Titanic.csv")
carprice.new<-read.csv('data/carprice', header=T); carprice.new
carprice.new<-read.csv('data\carprice', header=T); carprice.new
carprice.new<-read.csv('data\carprice.csv', header=T); carprice.new
source('C:/RStudy/210223_데이터입력및출력.R', encoding = 'UTF-8', echo=TRUE)
carprice.new<-read.csv('data/carprice.csv', header=T); carprice.new
str(carprice.new)
head(carprice.new)
library(svDialogs)
result<-subset(carprice.new, Type==type_input & MPG.city==MPG.city_input); result
type_input<-dlg_input('Input type')$res
MPG.city_input<-as.numeric(dlg_input('Input MPG.city')$res)
result<-subset(carprice.new, Type==type_input & MPG.city==MPG.city_input); result
type_input<-dlg_input('Input type')$res
MPG.city_input<-dlg_input('Input MPG.city')$res
result<-subset(carprice.new, Type==type_input & MPG.city==MPG.city_input); result
write.csv(result, 'result.csv', append=T)
write.csv(result, 'result.csv')
sink()
print(result)
sink('result2.xlsx', append=T)
print(result)
sink()
a<-c(3,1,5,2,7,8,10)
ifelse(a%%2==0, "even", "odd")
a<-10
b<-20
c<-ifelse(a>b, a,b)
print(c)
library(svDialogs)
amount_input<-as.numeric(dlg_input('purchase amount')$res)
if(amount_input>300000){
cat("your milege :", amount_input*0.07, sep=" ")
}
library(svDialogs)
amount_input<-as.numeric(dlg_input('purchase amount')$res)
if (amount_input>=300000){
cat("Class : ", Platinum, "\n", "Your miliege :", amount_input*0.07, sep=" ")
} else (200000=<amount_input=<300000) {
cat("Class : ", Gold, "\n", "your milege :", amount_input*0.05, sep=" ")
} else (100000=<amount_input=<200000) {
cat("Class : ", silver, "\n", "your milege :", amount_input*0.03, sep=" ")
} else (amount_input<100000) {
cat("Class : ", Friends, "\n", "your milege :", amount_input*0.01, sep=" ")
}
library(svDialogs)
amount_input<-as.numeric(dlg_input('purchase amount')$res)
if (amount_input>=300000){
cat("Class : ", Platinum, "\n", "Your miliege :", amount_input*0.07, sep=" ")
} else (200000<=amount_input<=300000) {
cat("Class : ", Gold, "\n", "your milege :", amount_input*0.05, sep=" ")
} else (100000<=amount_input<=200000) {
cat("Class : ", silver, "\n", "your milege :", amount_input*0.03, sep=" ")
} else (amount_input<100000) {
cat("Class : ", Friends, "\n", "your milege :", amount_input*0.01, sep=" ")
}
library(svDialogs)
amount_input<-as.numeric(dlg_input('purchase amount')$res)
if (amount_input>=300000){
cat("Class : Platinum", "\n", "Your miliege :", amount_input*0.07, sep=" ")
} else (200000<=amount_input<=300000) {
cat("Class : Gold", "\n", "your milege :", amount_input*0.05, sep=" ")
} else (100000<=amount_input<=200000) {
cat("Class : silver" , "\n", "your milege :", amount_input*0.03, sep=" ")
} else (amount_input<100000) {
cat("Class : Friends", "\n", "your milege :", amount_input*0.01, sep=" ")
}
for(i in 1:14){
print(i)
}
iris
nrow<-nrow(iris); nrow
norow<-nrow(iris); nrow
for (i in 1:norow) {
if (iris$Petal.Length[i]>=5.1) {
lb[i]<- 'High'
} else if(iris$Petal.Length[i]<=1.6) {
lb[i]<- 'Low')
} else {
lb[i]<- 'Medium'
}
}
lb<-c()
norow<-nrow(iris); nrow
for (i in 1:norow) {
if (iris$Petal.Length[i]>=5.1) {
lb[i]<- 'High'
} else if(iris$Petal.Length[i]<=1.6) {
lb[i]<- 'Low')
} else {
lb[i]<- 'Medium'
}
for (i in 1:norow) {
if (iris$Petal.Length[i]>=5.1) {
lb[i]<- 'High'
} else if(iris$Petal.Length[i]<=1.6) {
lb[i]<- 'Low'
} else {
lb[i]<- 'Medium'
}
print(lb)
lb<-c()
norow<-nrow(iris); norow
for (i in 1:norow) {
if (iris$Petal.Length[i]>=5.1) {
lb[i]<- 'High'
} else if(iris$Petal.Length[i]<=1.6) {
lb[i]<- 'Low'
} else {
lb[i]<- 'Medium'
}
}
print(lb)
lb
lb<-c()
norow<-nrow(iris); norow
for (i in 1:norow) {
if (iris$Petal.Length[i]>=5.1) {
lb[i]<- 'High'
} else if(iris$Petal.Length[i]<=1.6) {
lb[i]<- 'Low'
} else {
lb[i]<- 'Medium'
}
}
new<-data.frame(iris,lb)
head(new)
norow<-nrow(iris); norow
lb<-c()
norow<-nrow(iris); norow
for (i in 1:norow) {
if (iris$Petal.Length[i]>=5.1) {
lb[i]<- 'High'
} else if(iris$Petal.Length[i]<=1.6) {
lb[i]<- 'Low'
} else {
lb[i]<- 'Medium'
}
}
new<-data.frame(iris,lb)
head(new)
x<-data.frame(a=c(1,2,3), b=c('a',NA,"c"), c=c(2,3,NA))
x
na.fail(x)
na.omit(x)
na.exclude(x)
na.pass(x)
?state.x77
head(st)
st<-sate.x77
head(st)
st<-state.x77
head(st)
boxplot(st$Income)
st<-data.frame(state.x77)
head(st)
boxplot(st$In)
str(state.x77)
str(st)
boxplot.stats(st$Income)$out
out<-boxplot.stats(st$Income)$out
st$Income %In% out
st$Income %in% out
st$Income
st$Income[st$Income %in% out]<- NA
st$Income
nst<-st[complete.cases(st),]
st<-data.frame(state.x77)
st$Income==out
rownames(st$Income==out)
rownames(st)[st$Income==out]
z1 <- c( 1, 3, 4, NA, 5, 10, NA)
sum(z1, na.rm = T)
z1[is.na(z1)]   # 결측치를 0으로 대체
z1[is.na(z1)] <- 0   # 결측치를 0으로 대체
z3 <- na.omit(z2)
z2 <- c(2, 4, NA, 7, -10, 9, NA)
z2
z3 <- na.omit(z2)
z3
z3 <- as.vector(na.omit(z2))  # 결측치 제거
sum(z1)
z3
z3 <- na.omit(z2)
z3
z3 <- as.vector(na.omit(z2))  # 결측치 제거
sum(z1)
z1 <- c( 1, 3, 4, NA, 5, 10, NA)
sum(z1)
z1[is.na(z1)] <- 0   # 결측치를 0으로 대체
sum(z1)
x <- iris
head(x, 10)
# str(x)
# summary(x)
x[3,5] <- NA
x[1,3] <- NA
x[2,4] <- NA
head(x)
sum(is.na(x)) # 결측치 개수 계산
newdata<-scale(x); newdata
x<- c(1,2,3,4,5,6,7,8)
newdata<-scale(x); newdata
mean(newdata)
airquality
transform(airquality, Ozone = -Ozone)
transform(air, new=-Ozone, Temp =(Temp-32)/1.8)
transform(airquality, new=-Ozone, Temp =(Temp-32)/1.8)
# 열별로 결측치 개수 계산
ncol(x)
x <- iris
head(x, 10)
# str(x)
# summary(x)
x[3,5] <- NA
x[1,3] <- NA
x[2,4] <- NA
head(x)
# 열별로 결측치 개수 계산
ncol(x)
cat(colnames(x)[i], ':', sum(is.na(x[,i])), '\n')
for(i in 1:ncol(x)){
cat(colnames(x)[i], ':', sum(is.na(x[,i])), '\n')
}
cntNA <- function(y){
return(sum(is.na(y)))
}
cntNA(x[,1])
apply(x, 2, cntNA)
colSums(is.na(x))
colsuma(x)
colsums(x)
colSums(x)
runif(10)
set.seed(10)
x<-c("ab","acd","fghi")
length(x)
nchar(x)
grep("A", c("b","B","A"))
grep("b", c("b","B","A"))
grep("b","B", c("b","B","A"))
grep("c", c("b","B","A"))
install.packages("magtittr")
library(magrittr)
4,9,4,-1,30)
mean(x)
x<-c(1,4,9,4,-1,30)
mean(x)
x %>% mean
x[3]<-NA
x %>% is.na
x %>% is.na %>% sum
order(iris$Sepal.Length)
head(iris)
iris[order(iris$Sepal.Length)]
iris[order(iris$Sepal.Length),]
?order
head(Highway1)
carData
install.packages(carData)
install.packages("carData")
library(carData)
head(Highway1)
str(Highway1)
Highway1[order(Highway1$rate),]
Highway1[order(Highway1$rate), decreasing=F]
Highway1[order(Highway1$rate), decreasing=T,]
Highway1[order(Highway1$rate, decreasing=T,)]
Highway1[order(Highway1$rate, decreasing=T),]
order(Highway1$rate, decreasing=T,)
Highway1[order(Highway1$rate, decreasing=T,)]
Highway1[order(Highway1$rate, decreasing=T),]
Highway1[order(Highway1$len, decreasing = T),]
?sort
len_longest <- head(sort(Highway1$len, decreasing=T), n=10)
sum(len_longest)
Highway1[1,1]
Highway1[,1]
Highway1
str(Highway1)
levels(Highway1$htype)
split(Highway1, Highway1$htype)
nd <- split(Highway1, Highway1$htype)
nd
subset(Highway1, Highway1$len>= mean(Highway1$len))
subset(Highway1, Highway1$len>= mean(Highway1$len), select = c('rate','slim','htype'))
a<-data.frame(name=c('Lee','Choi','Kim'), math=c(75,80,90))
b<-data.frame(name=c('Kim','Park','Choi'), eng = c(100,50,80))
a<-data.frame(name=c('Lee','Choi','Kim'), math=c(75,80,90))
b<-data.frame(name=c('Kim','Park','Choi'), eng = c(100,50,80))
a
b
rbind(a,b)
a<-data.frame(name=c('Lee','Choi','Kim'), math=c(75,80,90))
b<-data.frame(name=c('Kim','Park','Choi'), eng = c(100,50,80))
a
b
rbind(a,b)
merge(a,b)
?merge
merge(a,b,all=T)
(Highway1$htype)
comn(n,2)
Highway1$htype)
combn(n,2)
n<-levels(Highway1$htype)
combn(n,2)
str(KosteckiDillon)
sample(KosteckiDillon, nrow(KosteckiDillon)*0.03)
s<-sample(KosteckiDillon, nrow(KosteckiDillon)*0.01)
s<-sample(KosteckiDillon, nrow(KosteckiDillon)*0.01,replace=T)
s
s$dos
s$dos
sample(KosteckiDillon, nrow(KosteckiDillon)*0.03)
tot.mean<-mean(KosteckiDillon)
tot.mean<-mean(KosteckiDillon$dos)
idx<-sample(KosteckiDillon, nrow(KosteckiDillon)*0.01)
idx<-sample(nrow(KosteckiDillon), nrow(KosteckiDillon)*0.01)
idx<-sample(nrow(KosteckiDillon), nrow(KosteckiDillon)*0.01) ; idx
sdata<-(KosteckiDillon[idx,'dos'])
sdata<-(KosteckiDillon[idx,'dos']); sdata
mean(sdata)
tot.mean
order(Highway1$rate, decreasing=T)
Highway1$rate
Highway1[order(Highway1$rate, decreasing=T),]
for(rate in (1:5)*0.1){
idx<-sample(nrow(KosteckiDillon), nrow(KosteckiDillon)*rate)
sdata <- KosteckiDillon[idx,'dos']
smean<-mean(sdata)
cat('Diff:', rate, tot.mean-smean.'\n')
}
cat('Diff:', rate, tot.mean-smean,'\n')
for(rate in (1:5)*0.1){
idx<-sample(nrow(KosteckiDillon), nrow(KosteckiDillon)*rate)
sdata <- KosteckiDillon[idx,'dos']
smean<-mean(sdata)
cat('Diff:', rate, tot.mean-smean,'\n')
}
apply(KosteckiDillon[,c('time','age','airq')],2.mean)
apply(KosteckiDillon[,c('time','age','airq')],2,mean)
apply(KosteckiDillon[,c('time','age','airq')],2,mean,trim=0.1)
apply(KosteckiDillon[,c('time','age','airq')],2,max)
class(r1); class(r2)
r1<-apply(KosteckiDillon[,c('time','age','airq')],2, mean)
r2<-lapply(KosteckiDillon[,c('time','age','airq')], mean)
class(r1); class(r2)
head(r1)
r2
<- list(a=c(1,2,3), b=c(5,6,7))
m
m<- list(a=c(1,2,3), b=c(5,6,7))
m
lapply(m, mean)
m.mean<-lapply(m, mean)
class(m.mean)
unlist(m.mean); m.mean
unlist(m.mean)
unlist(m.mean); m.mean
vector.m<-unlist(m.mean);
vector.n
vector.m
test<-unlist(lapply(iris[,c(1:4)],mean))
test
lapply(iris[,c(1:4)],mean
lapply(iris[,c(1:4)],mean)
a<-lapply(iris[,c(1:4)],mean);a
sapply(m, function(x){x>5})
lapply(m, function(x){x>5})
tapply(1:10, 1:10 %% 2==1, sum)
class(tapply(1:10, 1:10 %% 2==1, sum))
iris[,5]
colnames(iris[,5])
tapply(iris, iris$Species,mean)
tapply(iris$Sepal.Length, iris$Species,mean)
colnames(iris)
colnames(iris)[5]
tapply(iris$Sepal.Length, colnames(iris)[5], mean)
x<- matrix(1:8,ncol=2,dimnames=list(c("봄","여름","가을","겨울"),c("남","여"))) ;x
list(c(1,1,2,2,1,1,2,2),c(1,1,1,1,2,2,2,2))
tapply(x,gidx,sum)
gidx<-list(c(1,1,2,2,1,1,2,2),c(1,1,1,1,2,2,2,2))
tapply(x,gidx,sum)
x<- matrix(1:8,ncol=2,dimnames=list(c("봄","여름","가을","겨울"),c("남","여"))) ;x
install.packages("doBy")
library(doBy)
summaryBy(Sepal.width+Sepal.Length ~ Species, iris)
summaryBy(Sepal.Width+Sepal.Length ~ Species, iris)
orderBy(~Sepla.Width + Species, iris)
orderBy(~Sepal.Width + Species, iris)
orderBy(~Species + Sapal.Length, iris)
orderBy(~ Species + Sepal.Length, iris)
quantile(iris$Sepal.Length, seq(0.1,0.2))
quantile(iris$Sepal.Length, seq(0.1,0.2))
quantile(iris$Sepal.Length)
quantile(iris$Sepal.Length, seq(0,1,0.2))
sapply(m, function(x){x>5})
head(carData)
install.packages("carData")
library(carData)
head(carData)
