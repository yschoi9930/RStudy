geom_point(data=line2,aes(x=lon,y=lat,colour=호선),col='red', size=3) +
geom_point(data=mapapt_code_final,aes(x=lon,y=lat,colour=거래금액), size=3, alpha=0.5) +
scale_color_gradient(low= 'green', high = 'red') +
geom_text(data=apt_final_h, aes(label=단지명), size=4, vjust=1) +
geom_text(data=apt_final_h, aes(label=거래금액), size=4, vjust=-1)
ggmap(mapo) +
geom_point(data=line2,aes(x=lon,y=lat,colour=호선),col='red', size=3) +
geom_point(data=mapapt_code_final,aes(x=lon,y=lat,colour=거래금액), size=3, alpha=0.5) +
scale_color_gradient(low= 'green', high = 'red') +
geom_text(data=apt_final_h, aes(label=단지명), size=4, vjust=1) +
geom_text(data=apt_final_h, aes(label=거래금액), size=4, vjust=-1) +
geom_text(data=apt_final_r, aes(label=단지명), size=4, vjust=1) +
geom_text(data=apt_final_r, aes(label=거래금액), size=4, vjust=-1)
install.packages('ggiraphExtra')
library(ggiraphExtra)
# 사용데이터 (범죄율 데이터)
head(USArrests)
library(tibble)
crime <- rownames_to_column(USArrests, var='state')
head(crime)
library(ggplot2)
library(maps)
View(crime)
View(state_map)
state_map <- map_data('state')
library(maps)
install.packages('maps')
library(maps)
state_map <- map_data('state')
View(state_map)
crime$state <-tolower(crime$state)
str(state_map)
ggChoropleth(data=crime, # 지도에 표현될 데이터
aes(fill=Murder, # 색상으로 표현할 변수
map_id=state, # 지도와 매핑될 기준 변수
), map=state_map)
install.packages('mapproj')
library(mapproj)
ggChoropleth(data=crime, # 지도에 표현될 데이터
aes(fill=Murder, # 색상으로 표현할 변수
map_id=state, # 지도와 매핑될 기준 변수
), map=state_map)
ggChoropleth(data=crime, # 지도에 표현될 데이터
aes(fill=Murder, # 색상으로 표현할 변수
map_id=state, # 지도와 매핑될 기준 변수
), map=state_map) +
ggtitle("주별 범죄 데이터")
ggChoropleth(data=crime, # 지도에 표현될 데이터
aes(fill=Murder, # 색상으로 표현할 변수
map_id=state, # 지도와 매핑될 기준 변수
), map=state_map) +
ggtitle("주별 범죄 데이터") +
theme(plot.title = element_text(face='bold', size=20, hjust=0.5) )
ggChoropleth(data=crime, # 지도에 표현될 데이터
aes(fill=Murder, # 색상으로 표현할 변수
map_id=state, # 지도와 매핑될 기준 변수
), map=state_map) +
ggtitle("주별 범죄 데이터") +
theme(plot.title = element_text(face='bold', size=20, hjust=0.5), legend.position = 'bottom')
ggChoropleth(data=crime, # 지도에 표현될 데이터
aes(fill=Murder, # 색상으로 표현할 변수
map_id=state, # 지도와 매핑될 기준 변수
), map=state_map, interactive = T) +
ggtitle("주별 범죄 데이터") +
theme(plot.title = element_text(face='bold', size=20, hjust=0.5), legend.position = 'bottom')
ggChoropleth(data=crime, # 지도에 표현될 데이터
aes(fill=Murder, # 색상으로 표현할 변수
map_id=state, # 지도와 매핑될 기준 변수
), map=state_map, interactive = T)
# 색상변경 : 기본 파레트 -> palette = "OrRd'
ggChoropleth(data=crime, # 지도에 표현될 데이터
aes(fill=Murder, # 색상으로 표현할 변수
map_id=state, # 지도와 매핑될 기준 변수
), map=state_map, interactive = T, palette='Blues')
# 표현변수 2개 사용
ggChoropleth(data=crime, # 지도에 표현될 데이터
aes(fill=c(Murder, Rape), # 색상으로 표현할 변수
map_id=state, # 지도와 매핑될 기준 변수
), map=state_map, interactive = T, palette='Blues')
# 동적지도를 생성하고 제목을 추가하는 코드
F <-ggChoropleth(data=crime, # 지도에 표현될 데이터
aes(fill=Murder, # 색상으로 표현할 변수
map_id=state, # 지도와 매핑될 기준 변수
), map=state_map, interactive = F)
F <- F + ggtitle('주별 범죄 데이터') +
theme(plot.title = element_text(face='bold', size=20, hjust=0.5))
library(ggiraph)
ggiraph(ggobj=F, zoom_max=10)
install.packages(kormaps2014)
install.packages('kormaps2014')
devtools::install_github("cardiomoon/kormaps2014")
install.packages('devtools')
devtools::install_github("cardiomoon/kormaps2014")
# 변수 속성 확인
str(komap1)
# 변수 속성 확인
str(kormap1)
# 변수 속성 확인
str(kormap1)
# 변수 속성 확인
head(kormap1)
str(kormap1)
devtools::install_github("cardiomoon/kormaps2014")
library(kormaps2014)
# 변수 속성 확인
head(kormap1)
str(kormap1)
str(korpop1)
str(changeCode(korpop1))
km1 <- kormap1
kp1 <- korpop1
View(km1)
View(kp1)
kp1 <- rename(kp1,
pop=총인구_명,
name = 행정구역별_읍면동)
str(kp1)
str(changeCode(kp1))
# kp1의 name 한글 깨짐 해결 iconv(data, from, to)
kp1$name <- iconv(kp1$name, 'UTF-8','CP949')
ggChoropleth(data=kp1,
aes(fill=pop,
map_id=code,
tootip=name),
map=km1)
# -----------------------------------------------------
# 단계 구분도 작성
ggChoropleth(data=kp1,
aes(fill=pop,
map_id=code,
tootip=name),
map=km1, interactive = T)
ggChoropleth(map=km1)
ggChoropleth(data=kp1,
aes(fill=pop,
tootip=name),
map=km1, interactive = T)
View(tbc)
str(tbc)
str(changeCode(tbc))
tbc$name <- iconv(tbc$name, 'UTF-8','CP949')
tbc$name <- iconv(tbc$name, 'UTF-8','CP949')
View(tbc)
View(tbc)
data(tbc)
View(tbc)
typeof(tbc$name)
tbc$name1 <- iconv(tbc$name1, 'UTF-8','CP949')
ggChoropleth(data=tbc,
aes(fill=NewPts,
map_id=code),
map=km1, interactive = T)
ggChoropleth(data=tbc,
aes(fill=NewPts,
map_id=code,
tootip=name1),
map=km1, interactive = T)
ggChoropleth(data=tbc,
aes(fill=NewPts,
map_id=code,
tootip=name1,
color='blue'),
map=km1, interactive = T)
ggChoropleth(data=tbc,
aes(fill=NewPts,
map_id=code,
tootip=name1,
color='blues'),
map=km1, interactive = T)
ggChoropleth(data=tbc,
aes(fill=NewPts,
map_id=code,
tootip=name1,
color='Blues'),
map=km1, interactive = T)
ggChoropleth(data=tbc,
aes(fill=NewPts,
map_id=code,
tootip=name1),
map=km1, interactive = T, palette = 'Blues')
NewPts <- ggChoropleth(data=tbc,
aes(fill=NewPts,
map_id=code,
tootip=name1),
map=km1, interactive = T, palette = 'Blues')
NewPts <- ggChoropleth(data=tbc,
aes(fill=NewPts,
map_id=code,
tootip=name1),
map=km1, interactive = F, palette = 'Blues')
NewPts <- ggChoropleth(data=tbc,
aes(fill=NewPts,
map_id=code,
tootip=name1),
map=km1, interactive = F, palette = 'Blues')
NewPts <- ggChoropleth(data=tbc,
aes(fill=NewPts,
map_id=code,
tootip=name1),
map=km1, interactive = T, palette = 'Blues')
NewPts
NewPts <- NewPts + geom_tile("전국 결핵 환자 인구 수수")
NewPts <- NewPts + ggtitle("전국 결핵 환자 인구 수")
NewPts <- ggChoropleth(data=tbc,
aes(fill=NewPts,
map_id=code,
tootip=name1),
map=km1, interactive = F, palette = 'Blues')
NewPts <- NewPts + ggtitle("전국 결핵 환자 인구 수")
NewPts <- ggChoropleth(data=tbc,
aes(fill=NewPts,
map_id=code,
tootip=name1),
map=km1)
NewPts <- NewPts + ggtitle("전국 결핵 환자 인구 수")
NewPts
NewPts <- NewPts + ggtitle("전국 결핵 환자 인구 수") +
theme(plot.title = element_text(face='bold',size=20, hjust=0.5))
NewPts
NewPts <- ggChoropleth(data=tbc,
aes(fill=NewPts,
map_id=code,
tootip=name1),
map=km1, interactive= F)
# 동적지도를 생성하고 제목을 추가하는 코드
F <-ggChoropleth(data=crime, # 지도에 표현될 데이터
aes(fill=Murder, # 색상으로 표현할 변수
map_id=state, # 지도와 매핑될 기준 변수
), map=state_map, interactive = F)
F <- F + ggtitle('주별 범죄 데이터') +
theme(plot.title = element_text(face='bold', size=20, hjust=0.5))
F
NewPts <- ggChoropleth(data=tbc,
aes(fill=NewPts,
map_id=code,
tootip=name1),
map=km1, interactive= F, palette = 'Blues')
NewPts <- NewPts + ggtitle("전국 결핵 환자 인구 수") +
theme(plot.title = element_text(face='bold',size=20, hjust=0.5))
NewPts
NewPts <- ggChoropleth(data=tbc,
aes(fill=NewPts,
map_id=code,
tootip=name1),
map=km1, interactive= F, palette = 'Blues')
NewPts <- NewPts + ggtitle("전국 결핵 환자 인구 수") +
theme(plot.title = element_text(face='bold',size=20, hjust=0.5))
NewPts
NewPts <- ggChoropleth(data=tbc,
aes(fill=NewPts,
map_id=code,
tootip=name1),
map=km1,palette = 'Blues', interactive= F)
NewPts <- NewPts + ggtitle("전국 결핵 환자 인구 수") +
theme(plot.title = element_text(face='bold',size=20, hjust=0.5))
NewPts
NewPts <- ggChoropleth(data=tbc,
aes(fill=NewPts,
map_id=code,
tooltip=name1),
map=km1,palette = 'Blues', interactive= F)
NewPts
ggChoropleth(data=tbc,
aes(fill=NewPts,
map_id=code,
tooltip=name1),
map=km1,palette = 'Blues', interactive= T)
ggChoropleth(data=korpop2,
aes(fill=남자_명,
map_id=code,
tooltip=name1),
map=kormap2, palette = 'Blues', interactive= T)
ggChoropleth(data=korpop2,
aes(fill=여자자_명,
map_id=code,
tooltip=name1),
map=kormap2, palette = 'Blues', interactive= T)
ggChoropleth(data=korpop2,
aes(fill=여자_명,
map_id=code,
tooltip=name1),
map=kormap2, palette = 'Blues', interactive= T)
ggChoropleth(data=korpop2,
aes(fill=여자_명,
map_id=code,
tooltip=name1),
map=kormap3, palette = 'Blues', interactive= T)
ggChoropleth(data=korpop3,
aes(fill=여자_명,
map_id=code,
tooltip=name1),
map=kormap3, palette = 'Blues', interactive= T)
ggChoropleth(data=korpop2,
aes(fill=남자_명,
map_id=code,
tooltip=name1),
map=kormap2, palette = 'Blues', interactive= T)
View(korpop2)
ggChoropleth(data=korpop3,
aes(fill=여자_명,
map_id=code,
tooltip=name1),
map=kormap3, palette = 'Reds', interactive= T)
seoul <- read_excel('data/서울_자치구별_점포수.xlsx')
seoul_map <- read_excel('data/서울_map.xlsx')
View(seoul)
View(seoul_map)
seoul <- rename(seoul, name=행정구역별_읍면동)
ggChoropleth(data=seoul,
aes(fill=점포수,
map_id=code,
tooltip=name),
map=seoul_map, interactive= T)
ggChoropleth(data=seoul,
aes(fill=점포수,
map_id=code,
tooltip=name),
map=seoul_map, interactive= T, palette='Accent')
ggChoropleth(data=seoul,
aes(fill=comma(점포수),
map_id=code,
tooltip=name),
map=seoul_map, interactive= T, palette='Accent')
# ggplot으로 그려보기
# 인구분포도 ggplot으로 시각화하기
# 인구데이터 : kp1
ggplot(kp1, aes(map_id=code, fill=pop))
# ggplot으로 그려보기
# 인구분포도 ggplot으로 시각화하기
# 인구데이터 : kp1
ggplot(kp1, aes(map_id=code, fill=pop)) +
geom_map(map=km1, colour='black', size=0.1)
# ggplot으로 그려보기
# 인구분포도 ggplot으로 시각화하기
# 인구데이터 : kp1
ggplot(kp1, aes(map_id=code, fill=pop)) +
geom_map(map=km1, colour='black', size=0.1) +
expand_limits(x=km1$long, y=km1$lat)
# ggplot으로 그려보기
# 인구분포도 ggplot으로 시각화하기
# 인구데이터 : kp1
ggplot(kp1, aes(map_id=code, fill=pop)) +
geom_map(map=km1, colour='black', size=0.1) +
expand_limits(x=km1$long, y=km1$lat) +
ggtitle("2015년 시도별 인구 분포도도") +
scale_fill_gradient(colours=c('white','orange','red'))
# ggplot으로 그려보기
# 인구분포도 ggplot으로 시각화하기
# 인구데이터 : kp1
ggplot(kp1, aes(map_id=code, fill=pop)) +
geom_map(map=km1, colour='black', size=0.1) +
expand_limits(x=km1$long, y=km1$lat) +
ggtitle("2015년 시도별 인구 분포도도") +
scale_fill_gradientn(colours=c('white','orange','red'))
# ggplot으로 그려보기
# 인구분포도 ggplot으로 시각화하기
# 인구데이터 : kp1
ggplot(kp1, aes(map_id=code, fill=pop)) +
geom_map(map=km1, colour='black', size=0.1) +
expand_limits(x=km1$long, y=km1$lat) +
ggtitle("2015년 시도별 인구 분포도도") +
scale_fill_gradientn(colours=c('white','orange','red')) +
coord_map()
# ggplot으로 그려보기
# 인구분포도 ggplot으로 시각화하기
# 인구데이터 : kp1
ggplot(kp1, aes(map_id=code, fill=pop)) +
geom_map(map=km1, colour='black', size=0.1) +
expand_limits(x=km1$long, y=km1$lat) +
ggtitle("2015년 시도별 인구 분포도도") +
theme(plot.title = element_text(size=20, hjust=0.5)) +
scale_fill_gradientn(colours=c('white','orange','red')) +
coord_map()
# 서울시 점포 단계구분도를 ggplot을 이용해서 그려보기
ggplot(seoul, aes(map_id=code, fill=점포수)) +
geom_map(map=seoul_map, colou='red', size=0.1) +
expand_limits(x=seoul_map$long,y=seoul_map$lat) +
coord_map()
# 서울시 점포 단계구분도를 ggplot을 이용해서 그려보기
ggplot(seoul, aes(map_id=code, fill=점포수)) +
geom_map(map=seoul_map, colour='red', size=0.1) +
expand_limits(x=seoul_map$long,y=seoul_map$lat) +
coord_map()
# 서울시 점포 단계구분도를 ggplot을 이용해서 그려보기
ggplot(seoul, aes(map_id=code, fill=점포수)) +
geom_map(map=seoul_map, colour='black', size=0.1) +
expand_limits(x=seoul_map$long,y=seoul_map$lat) +
coord_map()
# 서울시 점포 단계구분도를 ggplot을 이용해서 그려보기
ggplot(seoul, aes(map_id=code, fill=점포수)) +
geom_map(map=seoul_map, colour='black', size=0.5) +
expand_limits(x=seoul_map$long,y=seoul_map$lat) +
coord_map()
# 서울시 점포 단계구분도를 ggplot을 이용해서 그려보기
ggplot(seoul, aes(map_id=code, fill=점포수)) +
geom_map(map=seoul_map, colour='black', size=0.1) +
expand_limits(x=seoul_map$long,y=seoul_map$lat) +
coord_map() +
scale_fill_gradientn(colours=c('white','orange','red'))
# 서울시 점포 단계구분도를 ggplot을 이용해서 그려보기
ggplot(seoul, aes(map_id=code, fill=점포수)) +
geom_map(map=seoul_map, colour='black', size=0.1) +
expand_limits(x=seoul_map$long,y=seoul_map$lat) +
coord_map() +
scale_fill_gradientn(colours=c('white','orange','red'))
# 서울시 점포 단계구분도를 ggplot을 이용해서 그려보기
ggplot(seoul, aes(map_id=code, fill=점포수)) +
geom_map(map=seoul_map, colour='blue', size=0.1) +
expand_limits(x=seoul_map$long,y=seoul_map$lat) +
coord_map() +
scale_fill_gradientn(colours=c('white','orange','red'))
# 서울시 점포 단계구분도를 ggplot을 이용해서 그려보기
ggplot(seoul, aes(map_id=code, fill=점포수)) +
geom_map(map=seoul_map, colour='black', size=0.1) +
expand_limits(x=seoul_map$long,y=seoul_map$lat) +
coord_map() +
scale_fill_gradientn(colours=c('white','orange','red'))
library(xml2)
library(dplyr)
library(stringr)
library(tidyverse)
install.packages('tidyverse')
xpath01 <- 'data/전통시장상점현황.xml'
head(xpath01)
xpath01 <- 'data/전통시장상점현황.xml'
xdata01 <- read_xml(xpath01)
# raw xml 구조 확인
class(xdata01)
head(xdata01)
typeof(xdata01)
str(xdata01)
View(xdata01)
# raw xml의 자식노드 구조 파악
# xml_children(xmlDATA)
xml_children(xdata01)
xdata01
# raw xml의 자식노드 구조 파악
# xml_children(xmlDATA)
child_node<-xml_children(xdata01) # {xml_nodeset (396)} : 396개 모두 가져옴
mode(child_node)
child_node[1]
xml_find_all(child_node[1],'./*')
xml_find_all(child_node[2],'./*')
# 태그 사이의 문자
child_node[2] %>% xml_find_all('./*') %>% xml_text()
#
child_node[2] %>% xml_find_all('./*') %>% xml_name()
xml_extract <- function(x) {
# t_row : x번째 행 데이터의 child nodeset
t_row = xml_find_all(child_node[x],'./*')
tibble(
idx=x,
# tag
# xml_name() : tag name 가져오기
key=t_row %>% xml_name(),
# text = value
value=t_row %>% xmltext()
) %>% return()
}
xml_extract(child_node[2])
xml_extract(2)
tibble(
idx=x,
# tag
# xml_name() : tag name 가져오기
key=t_row %>% xml_name(),
# text = value
value=t_row %>% xml_text()
) %>% return()
xml_extract <- function(x) {
# t_row : x번째 행 데이터의 child nodeset
t_row = xml_find_all(child_node[x],'./*')
tibble(
idx=x,
# tag
# xml_name() : tag name 가져오기
key=t_row %>% xml_name(),
# text = value
value=t_row %>% xml_text()
) %>% return()
}
a<-xml_extract(2); a
a<-xml_extract(1:10); a
seq(child_node) %>% typeof() # child_node만큼
seq(child_node) %>% str() # child_node만큼
m_T <- lapply(seq(child_node),xml_extract)
m_T
head(m_T)
data1 <- m_T %>% bind_rows()
data1 <- m_T %>% bind_rows(); data1
data1 <- m_T %>% bind_rows() %>% str()
data1 <- m_T %>% bind_rows() %>% spread(key,value)
library(tidyr)
data1 <- m_T %>% bind_rows() %>% spread(key,value)
data1 <- m_T %>% bind_rows() %>% spread(key,value); data1
# Example
url<-"https://entertain.naver.com/read?oid=408&aid=0000116226"
nv<-read_html(url)
head(nv)
class(nv)
View(nv)
mode(nv)
nv_node
nv_node <- html_nodes(nv, '#content > div.end_ct > div > h2')
# Example
install.packages('rvest')
library(rvest)
nv_node <- html_nodes(nv, '#content > div.end_ct > div > h2')
nv_node
nv_text <- html_text(nv_node)
nv_text
View(nv_node)
